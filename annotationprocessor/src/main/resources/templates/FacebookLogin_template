import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;

import com.facebook.AccessToken;
import com.facebook.AccessTokenTracker;
import com.facebook.CallbackManager;
import com.facebook.FacebookCallback;
import com.facebook.FacebookException;
import com.facebook.FacebookSdk;
import com.facebook.GraphRequest;
import com.facebook.GraphResponse;
import com.facebook.Profile;
import com.facebook.ProfileTracker;
import com.facebook.login.LoginManager;
import com.facebook.login.LoginResult;
import com.mrsool.utils.Constant;
import com.mrsool.utils.Utils;

import org.json.JSONObject;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;

public class FBLoginActivity extends AppCompatActivity {

    private CallbackManager callbackManager;
    private AccessTokenTracker accessTokenTracker;
    private ProfileTracker profileTracker;
    private AccessToken objAccessToken;
    //private TextView txtStatus, txtDetail;
    //private Button btnSignIn, btnSignOut;
    private String mUserEmail = null, mUserName = null, mUserId = null, mAccessToken = null;
    private Utils objUtils;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        objUtils = new Utils(this);

        /* Initialize FacebookSDK*/
        FacebookSdk.sdkInitialize(this.getApplicationContext());
        callbackManager = CallbackManager.Factory.create();

        getAccessToken();

        initLogin();

        /*isFBLogin this Flag is only for local testing porous *//*
        if (!getIntent().getBooleanExtra(Constant.IS_LOGIN_FB, false)) {
            initLogin();
        } else {
            if (objAccessToken != null) {
                objUtils.getSessionManager().setBooleanDetail(Constant.IS_LOGIN_FB, false);
                LoginManager.getInstance().logOut();
                objAccessToken = null;
                updateUI();
            }
        }*/
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        callbackManager.onActivityResult(requestCode, resultCode, data);
    }

    /*If you want your app to keep up with the current access token and profile, you can implement AccessTokenTracker and ProfileTracker classes.*/
    private void getAccessToken() {

        /*check already token available */
        objAccessToken = AccessToken.getCurrentAccessToken();

        /*Token not available , get it first */
        accessTokenTracker = new AccessTokenTracker() {
            @Override
            protected void onCurrentAccessTokenChanged(AccessToken oldAccessToken, AccessToken currentAccessToken) {
                // Set the access token using
                // currentAccessToken when it's loaded or set.
                objAccessToken = currentAccessToken;
                if (objAccessToken != null) {
                    Log.i("getAccessToken", "onCurrentAccessTokenChanged  CALL API ");
                    mUserId = objAccessToken.getUserId();
                    objUtils.getSessionManager().setBooleanDetail(Constant.IS_LOGIN_FB, true);
                    getProfileDataUsingGraph();
                }
            }
        };

        if (objAccessToken != null) {
            Log.i("objAccessToken", "exist call api ");
            getProfileDataUsingGraph();
        }
    }

    @Override
    public void onDestroy() {
        super.onDestroy();

        if (accessTokenTracker != null)
            accessTokenTracker.stopTracking();

        if (profileTracker != null)
            profileTracker.stopTracking();
    }

    /*You can use ProfileTracker in a similar way to track changes in the current profile:
     Also apply for login review if you are using special permission  https://developers.facebook.com/docs/facebook-login/review
    */
    private void getCurrentProfileDetails() {
        profileTracker = new ProfileTracker() {
            @Override
            protected void onCurrentProfileChanged(Profile oldProfile, Profile currentProfile) {
                /*get profile picture with dynamic image size*/
                currentProfile.getProfilePictureUri(120, 120);
            }
        };
    }

    /*To get the list of permissions associated with the current access token, call:*/
    private void getCurrentPermissionEnable() {
        AccessToken.getCurrentAccessToken().getPermissions();
    }

    /*To get the list of declined permissions, call:*/
    private void getCurrentPermissionDisable() {
        AccessToken.getCurrentAccessToken().getDeclinedPermissions();
    }


    private void initLogin() {
        if (objAccessToken == null) {
            /*Handle login callback */
            Log.i("facebook", "callbackManager" + callbackManager);
            LoginManager.getInstance().logInWithReadPermissions(FBLoginActivity.this, Arrays.asList("public_profile", "email"));
            Log.i("facebook", "callbackManager logInWithReadPermissions" + callbackManager);

            LoginManager.getInstance().registerCallback(callbackManager,
                    new FacebookCallback<LoginResult>() {
                        @Override
                        public void onSuccess(LoginResult loginResult) {
                            Log.i("getAccessToken", "initLogin  CALL API ");
                            objAccessToken = loginResult.getAccessToken();
                        }

                        @Override
                        public void onCancel() {
                            Log.i("initLogin", "onCancel");

                            updateUI();
                        }

                        @Override
                        public void onError(FacebookException error) {
                            Log.i("initLogin", "onError" + error.getMessage());
                            updateUI();
                        }
                    });
        }
    }

    private void getProfileDataUsingGraph() {
        mAccessToken = objAccessToken.getToken();
        mUserId = objAccessToken.getUserId();

        /*User Graph API to get user details */
        GraphRequest request = GraphRequest.newMeRequest(objAccessToken, new GraphRequest.GraphJSONObjectCallback() {

            @Override
            public void onCompleted(JSONObject object, GraphResponse response) {
                Log.i("GplusLoginActivity", response.toString());
                // Get facebook data from login
                parseFacebookData(object);
            }
        });
        Bundle parameters = new Bundle();
        parameters.putString("fields", "id, first_name, last_name, email,gender, birthday, location");
        request.setParameters(parameters);
        request.executeAsync();
    }


    private void parseFacebookData(JSONObject object) {
        Bundle bundle = null;
        try {
            bundle = new Bundle();
            String id = object.getString("id");
            URL profile_pic = null;
            try {
                profile_pic = new URL("https://graph.facebook.com/" + id + "/picture?width=200&height=150");
                Log.i("profile_pic", profile_pic + "");
                bundle.putString("profile_pic", profile_pic.toString());

            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (Exception e) {
                e.printStackTrace();
            }
            bundle.putString("idFacebook", id);
            if (object.has("first_name")) {
                bundle.putString("first_name", object.getString("first_name"));
                mUserName = object.getString("first_name") + " ";
            }
            if (object.has("last_name")) {
                bundle.putString("last_name", object.getString("last_name"));
                mUserName += object.getString("last_name");
            }

            if (object.has("email")) {
                bundle.putString("email", object.getString("email"));
                mUserEmail = object.getString("email");
            }
            if (object.has("gender"))
                bundle.putString("gender", object.getString("gender"));
            if (object.has("birthday"))
                bundle.putString("birthday", object.getString("birthday"));
            if (object.has("location"))
                bundle.putString("location", object.getJSONObject("location").getString("name"));

            /*Store data to local */
            objUtils.getSessionManager().setBooleanDetail(Constant.IS_LOGIN_FB, true);
            objUtils.getSessionManager().setStringDetail(Constant.FB_APP_ID, mUserId);
            objUtils.getSessionManager().setStringDetail(Constant.FB_UNAME, mUserName);
            objUtils.getSessionManager().setStringDetail(Constant.FB_EMAIL, mUserEmail != null && mUserEmail.length() > 0 ? mUserEmail : null);
            objUtils.getSessionManager().setStringDetail(Constant.FB_PIC, profile_pic.toString());

            updateUI();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void updateUI() {
        Log.i("faceboo", "updateUI");
        if (objAccessToken != null) {
            //   txtStatus.setText("Sign in");

            String mtxt = null;
            mtxt = mUserId != null ? "User Id : " + mUserId + "\n\n" : "User Id : Not Available \n\n";
            mtxt += mUserEmail != null ? "User Email : " + mUserEmail + "\n\n" : "User Email : Not Available \n\n";
            mtxt += mUserName != null ? "User Name : " + mUserName + "\n\n" : "User Name : Not Available\n\n";
            mtxt += mAccessToken != null ? "Access Token : " + mAccessToken + "\n\n" : "Access Token : Not Available\n\n";


            /*Logout from facebook once you get fb id */
            LoginManager.getInstance().logOut();

            /*Return result */
            Intent returnIntent = new Intent();
            setResult(Activity.RESULT_OK, returnIntent);
            finish();
        } else {

            /*Logout from facebook once you get fb id */
            LoginManager.getInstance().logOut();

            /*Return result */
            Intent returnIntent = new Intent();
            setResult(Activity.RESULT_CANCELED, returnIntent);
            finish();
        }
    }


}